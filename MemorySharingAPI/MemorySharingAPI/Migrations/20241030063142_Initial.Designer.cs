// <auto-generated />
using System;
using MemorySharingAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MemorySharingAPI.Migrations
{
    [DbContext(typeof(MemorySharingPlatformContext))]
    [Migration("20241030063142_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MemorySharingAPI.Models.AdView", b =>
                {
                    b.Property<int>("AdViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdViewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdViewId"));

                    b.Property<int?>("AdId")
                        .HasColumnType("int")
                        .HasColumnName("AdID");

                    b.Property<DateTime?>("ViewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ViewerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ViewerID");

                    b.HasKey("AdViewId")
                        .HasName("PK__AdViews__E6D0F11A464F8C34");

                    b.HasIndex("AdId");

                    b.HasIndex("ViewerId");

                    b.ToTable("AdViews");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Advertisement", b =>
                {
                    b.Property<int>("AdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdId"));

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("TargetUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TargetURL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AdId")
                        .HasName("PK__Advertis__7130D58EC915CBBF");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Analytic", b =>
                {
                    b.Property<int>("AnalyticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnalyticsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalyticsId"));

                    b.Property<int?>("Comments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("MomentId")
                        .HasColumnType("int")
                        .HasColumnName("MomentID");

                    b.Property<int?>("Shares")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("AnalyticsId")
                        .HasName("PK__Analytic__506974C3FA0DF960");

                    b.HasIndex("MomentId");

                    b.ToTable("Analytics");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Categori__19093A2B119B2BB4");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("MomentId")
                        .HasColumnType("int")
                        .HasColumnName("MomentID");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__C3B4DFAA958F4B4E");

                    b.HasIndex("MomentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Follower", b =>
                {
                    b.Property<string>("FollowerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FollowerID");

                    b.Property<string>("FollowingId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FollowingID");

                    b.Property<DateTime?>("FollowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("FollowerId", "FollowingId")
                        .HasName("PK__Follower__79CB03DBFB6445C8");

                    b.HasIndex("FollowingId");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LikeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<DateTime?>("LikedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("MomentId")
                        .HasColumnType("int")
                        .HasColumnName("MomentID");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("LikeId")
                        .HasName("PK__Likes__A2922CF4EA588C2E");

                    b.HasIndex("MomentId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ReceiverID");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SenderID");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__C87C037C6EA3FE2C");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Moment", b =>
                {
                    b.Property<int>("MomentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MomentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MomentId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsMemory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("MediaType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MediaURL");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.Property<int?>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("MomentId")
                        .HasName("PK__Moments__D89D9A6C91A7E073");

                    b.HasIndex("UserId");

                    b.ToTable("Moments");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.MomentCategory", b =>
                {
                    b.Property<int>("MomentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MomentCategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MomentCategoryId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("MomentId")
                        .HasColumnType("int")
                        .HasColumnName("MomentID");

                    b.HasKey("MomentCategoryId")
                        .HasName("PK__MomentCa__150AF91D9B2EBDB3");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MomentId");

                    b.ToTable("MomentCategories");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.MomentShare", b =>
                {
                    b.Property<int>("ShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShareID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShareId"));

                    b.Property<bool?>("IsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MomentId")
                        .HasColumnType("int")
                        .HasColumnName("MomentID");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ReceiverID");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SenderID");

                    b.Property<DateTime?>("SharedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ShareId")
                        .HasName("PK__MomentSh__D32A3F8E596FB992");

                    b.HasIndex("MomentId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("MomentShares");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.MomentTag", b =>
                {
                    b.Property<int>("MomentTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MomentTagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MomentTagId"));

                    b.Property<int?>("MomentId")
                        .HasColumnType("int")
                        .HasColumnName("MomentID");

                    b.Property<int?>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.HasKey("MomentTagId")
                        .HasName("PK__MomentTa__A3E91E48996E92AE");

                    b.HasIndex("MomentId");

                    b.HasIndex("TagId");

                    b.ToTable("MomentTags");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.MomentView", b =>
                {
                    b.Property<int>("ViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ViewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViewId"));

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("IPAddress");

                    b.Property<int?>("MomentId")
                        .HasColumnType("int")
                        .HasColumnName("MomentID");

                    b.Property<DateTime?>("ViewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ViewerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ViewerID");

                    b.HasKey("ViewId")
                        .HasName("PK__MomentVi__1E371C163BD72A67");

                    b.HasIndex("MomentId");

                    b.HasIndex("ViewerId");

                    b.ToTable("MomentViews");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E321402FD82");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A584A002178");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.PurchasableView", b =>
                {
                    b.Property<int>("ViewPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ViewPackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ViewPackageId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PackageName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("ViewPackageId")
                        .HasName("PK__Purchasa__9440FEC0C7BCF2D8");

                    b.ToTable("PurchasableViews");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int?>("MomentId")
                        .HasColumnType("int")
                        .HasColumnName("MomentID");

                    b.Property<string>("ReportContent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ReportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReporterId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ReporterID");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.HasKey("ReportId")
                        .HasName("PK__Reports__D5BD48E56418A99B");

                    b.HasIndex("MomentId");

                    b.HasIndex("ReporterId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.SavedMoment", b =>
                {
                    b.Property<int>("SaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SaveID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaveId"));

                    b.Property<int?>("MomentId")
                        .HasColumnType("int")
                        .HasColumnName("MomentID");

                    b.Property<DateTime?>("SavedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("SaveId")
                        .HasName("PK__SavedMom__1450D3860C659060");

                    b.HasIndex("MomentId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedMoments");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TagId")
                        .HasName("PK__Tags__657CFA4CCC06BDFA");

                    b.HasIndex(new[] { "TagName" }, "UQ__Tags__BDE0FD1D6B3435A7")
                        .IsUnique()
                        .HasFilter("[TagName] IS NOT NULL");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Theme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ThemeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThemeId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ThemeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ThemeId")
                        .HasName("PK__Themes__FBB3E4B9B41CB810");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpirationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MemorySharingAPI.Models.UserProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProfileID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ProfilePictureURL");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ProfileId")
                        .HasName("PK__UserProf__290C888470D20931");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.UserTheme", b =>
                {
                    b.Property<int>("UserThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserThemeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserThemeId"));

                    b.Property<DateTime?>("PurchasedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("int")
                        .HasColumnName("ThemeID");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("UserThemeId")
                        .HasName("PK__UserThem__CC8724CBFE21DDCC");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserThemes");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.UserViewPackage", b =>
                {
                    b.Property<int>("UserViewPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserViewPackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserViewPackageId"));

                    b.Property<DateTime?>("PurchasedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.Property<int?>("ViewPackageId")
                        .HasColumnType("int")
                        .HasColumnName("ViewPackageID");

                    b.Property<int?>("ViewsRemaining")
                        .HasColumnType("int");

                    b.HasKey("UserViewPackageId")
                        .HasName("PK__UserView__BEAAA46877563381");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewPackageId");

                    b.ToTable("UserViewPackages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "dd5e352e-8f8a-4cf8-a953-521aead4fe84",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c0c078f-4e1f-4ec4-9ab9-3139025e7847",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("MemorySharingAPI.Models.AdView", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.Advertisement", "Ad")
                        .WithMany("AdViews")
                        .HasForeignKey("AdId")
                        .HasConstraintName("FK__AdViews__AdID__787EE5A0");

                    b.HasOne("MemorySharingAPI.Models.User", "Viewer")
                        .WithMany("AdViews")
                        .HasForeignKey("ViewerId")
                        .HasConstraintName("FK__AdViews__ViewerI__797309D9");

                    b.Navigation("Ad");

                    b.Navigation("Viewer");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Analytic", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.Moment", "Moment")
                        .WithMany("Analytics")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("FK__Analytics__Momen__7D439ABD");

                    b.Navigation("Moment");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Comment", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.Moment", "Moment")
                        .WithMany("Comments")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("FK__Comments__Moment__6754599E");

                    b.HasOne("MemorySharingAPI.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Comments__UserID__68487DD7");

                    b.Navigation("Moment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Follower", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.User", "FollowerNavigation")
                        .WithMany("FollowerFollowerNavigations")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK__Followers__Follo__5DCAEF64");

                    b.HasOne("MemorySharingAPI.Models.User", "Following")
                        .WithMany("FollowerFollowings")
                        .HasForeignKey("FollowingId")
                        .IsRequired()
                        .HasConstraintName("FK__Followers__Follo__5EBF139D");

                    b.Navigation("FollowerNavigation");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Like", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.Moment", "Moment")
                        .WithMany("LikesNavigation")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("FK__Likes__MomentID__6C190EBB");

                    b.HasOne("MemorySharingAPI.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Likes__UserID__6D0D32F4");

                    b.Navigation("Moment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Message", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.User", "Receiver")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK__Messages__Receiv__10566F31");

                    b.HasOne("MemorySharingAPI.Models.User", "Sender")
                        .WithMany("MessageSenders")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK__Messages__Sender__0F624AF8");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Moment", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.User", "User")
                        .WithMany("Moments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Moments__UserID__4222D4EF");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.MomentCategory", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.Category", "Category")
                        .WithMany("MomentCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__MomentCat__Categ__17F790F9");

                    b.HasOne("MemorySharingAPI.Models.Moment", "Moment")
                        .WithMany("MomentCategories")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("FK__MomentCat__Momen__17036CC0");

                    b.Navigation("Category");

                    b.Navigation("Moment");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.MomentShare", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.Moment", "Moment")
                        .WithMany("MomentShares")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("FK__MomentSha__Momen__4E88ABD4");

                    b.HasOne("MemorySharingAPI.Models.User", "Receiver")
                        .WithMany("MomentShareReceivers")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK__MomentSha__Recei__5070F446");

                    b.HasOne("MemorySharingAPI.Models.User", "Sender")
                        .WithMany("MomentShareSenders")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK__MomentSha__Sende__4F7CD00D");

                    b.Navigation("Moment");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.MomentTag", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.Moment", "Moment")
                        .WithMany("MomentTags")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("FK__MomentTag__Momen__1DB06A4F");

                    b.HasOne("MemorySharingAPI.Models.Tag", "Tag")
                        .WithMany("MomentTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK__MomentTag__TagID__1EA48E88");

                    b.Navigation("Moment");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.MomentView", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.Moment", "Moment")
                        .WithMany("MomentViews")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("FK__MomentVie__Momen__49C3F6B7");

                    b.HasOne("MemorySharingAPI.Models.User", "Viewer")
                        .WithMany("MomentViews")
                        .HasForeignKey("ViewerId")
                        .HasConstraintName("FK__MomentVie__Viewe__4AB81AF0");

                    b.Navigation("Moment");

                    b.Navigation("Viewer");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Notification", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Notificat__UserI__628FA481");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Payment", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Payments__UserID__70DDC3D8");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Report", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.Moment", "Moment")
                        .WithMany("Reports")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("FK__Reports__MomentI__09A971A2");

                    b.HasOne("MemorySharingAPI.Models.User", "Reporter")
                        .WithMany("Reports")
                        .HasForeignKey("ReporterId")
                        .HasConstraintName("FK__Reports__Reporte__0A9D95DB");

                    b.Navigation("Moment");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.SavedMoment", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.Moment", "Moment")
                        .WithMany("SavedMoments")
                        .HasForeignKey("MomentId")
                        .HasConstraintName("FK__SavedMome__Momen__05D8E0BE");

                    b.HasOne("MemorySharingAPI.Models.User", "User")
                        .WithMany("SavedMoments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__SavedMome__UserI__04E4BC85");

                    b.Navigation("Moment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.UserProfile", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserProfi__UserI__3F466844");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.UserTheme", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.Theme", "Theme")
                        .WithMany("UserThemes")
                        .HasForeignKey("ThemeId")
                        .HasConstraintName("FK__UserTheme__Theme__59FA5E80");

                    b.HasOne("MemorySharingAPI.Models.User", "User")
                        .WithMany("UserThemes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserTheme__UserI__59063A47");

                    b.Navigation("Theme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.UserViewPackage", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.User", "User")
                        .WithMany("UserViewPackages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserViewP__UserI__25518C17");

                    b.HasOne("MemorySharingAPI.Models.PurchasableView", "ViewPackage")
                        .WithMany("UserViewPackages")
                        .HasForeignKey("ViewPackageId")
                        .HasConstraintName("FK__UserViewP__ViewP__2645B050");

                    b.Navigation("User");

                    b.Navigation("ViewPackage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemorySharingAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MemorySharingAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Advertisement", b =>
                {
                    b.Navigation("AdViews");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Category", b =>
                {
                    b.Navigation("MomentCategories");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Moment", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("Comments");

                    b.Navigation("LikesNavigation");

                    b.Navigation("MomentCategories");

                    b.Navigation("MomentShares");

                    b.Navigation("MomentTags");

                    b.Navigation("MomentViews");

                    b.Navigation("Reports");

                    b.Navigation("SavedMoments");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.PurchasableView", b =>
                {
                    b.Navigation("UserViewPackages");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Tag", b =>
                {
                    b.Navigation("MomentTags");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.Theme", b =>
                {
                    b.Navigation("UserThemes");
                });

            modelBuilder.Entity("MemorySharingAPI.Models.User", b =>
                {
                    b.Navigation("AdViews");

                    b.Navigation("Comments");

                    b.Navigation("FollowerFollowerNavigations");

                    b.Navigation("FollowerFollowings");

                    b.Navigation("Likes");

                    b.Navigation("MessageReceivers");

                    b.Navigation("MessageSenders");

                    b.Navigation("MomentShareReceivers");

                    b.Navigation("MomentShareSenders");

                    b.Navigation("MomentViews");

                    b.Navigation("Moments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Reports");

                    b.Navigation("SavedMoments");

                    b.Navigation("UserProfiles");

                    b.Navigation("UserThemes");

                    b.Navigation("UserViewPackages");
                });
#pragma warning restore 612, 618
        }
    }
}
