// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace MemorySharingAPI.Models;

public partial class MemorySharingPlatformContext : IdentityDbContext<User>
{
    public MemorySharingPlatformContext(DbContextOptions<MemorySharingPlatformContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AdView> AdViews { get; set; }

    public virtual DbSet<Advertisement> Advertisements { get; set; }

    public virtual DbSet<Analytic> Analytics { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Follower> Followers { get; set; }

    public virtual DbSet<Like> Likes { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<Moment> Moments { get; set; }

    public virtual DbSet<MomentCategory> MomentCategories { get; set; }

    public virtual DbSet<MomentShare> MomentShares { get; set; }

    public virtual DbSet<MomentTag> MomentTags { get; set; }

    public virtual DbSet<MomentView> MomentViews { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PurchasableView> PurchasableViews { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<SavedMoment> SavedMoments { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<Theme> Themes { get; set; }

    public virtual DbSet<UserProfile> UserProfiles { get; set; }

    public virtual DbSet<UserTheme> UserThemes { get; set; }

    public virtual DbSet<UserViewPackage> UserViewPackages { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        // Define roles with specific GUIDs
        var adminRoleId = Guid.NewGuid().ToString();
        var userRoleId = Guid.NewGuid().ToString();

        modelBuilder.Entity<Role>().HasData(
            new Role
            {
                Id = adminRoleId,
                Name = "Admin",
                NormalizedName = "ADMIN"
            },
            new Role
            {
                Id = userRoleId,
                Name = "User",
                NormalizedName = "USER"
            }
        );

        modelBuilder.Entity<AdView>(entity =>
        {
            entity.HasKey(e => e.AdViewId).HasName("PK__AdViews__E6D0F11A464F8C34");

            entity.Property(e => e.AdViewId).HasColumnName("AdViewID");
            entity.Property(e => e.AdId).HasColumnName("AdID");
            entity.Property(e => e.ViewDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ViewerId).HasColumnName("ViewerID");

            entity.HasOne(d => d.Ad).WithMany(p => p.AdViews)
                .HasForeignKey(d => d.AdId)
                .HasConstraintName("FK__AdViews__AdID__787EE5A0");

            entity.HasOne(d => d.Viewer).WithMany(p => p.AdViews)
                .HasForeignKey(d => d.ViewerId)
                .HasConstraintName("FK__AdViews__ViewerI__797309D9");
        });

        modelBuilder.Entity<Advertisement>(entity =>
        {
            entity.HasKey(e => e.AdId).HasName("PK__Advertis__7130D58EC915CBBF");

            entity.Property(e => e.AdId).HasColumnName("AdID");
            entity.Property(e => e.Content).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("ImageURL");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.TargetUrl)
                .HasMaxLength(255)
                .HasColumnName("TargetURL");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Analytic>(entity =>
        {
            entity.HasKey(e => e.AnalyticsId).HasName("PK__Analytic__506974C3FA0DF960");

            entity.Property(e => e.AnalyticsId).HasColumnName("AnalyticsID");
            entity.Property(e => e.Comments).HasDefaultValue(0);
            entity.Property(e => e.LastUpdated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Likes).HasDefaultValue(0);
            entity.Property(e => e.MomentId).HasColumnName("MomentID");
            entity.Property(e => e.Shares).HasDefaultValue(0);
            entity.Property(e => e.Views).HasDefaultValue(0);

            entity.HasOne(d => d.Moment).WithMany(p => p.Analytics)
                .HasForeignKey(d => d.MomentId)
                .HasConstraintName("FK__Analytics__Momen__7D439ABD");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__Categori__19093A2B119B2BB4");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(255);
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.CommentId).HasName("PK__Comments__C3B4DFAA958F4B4E");

            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MomentId).HasColumnName("MomentID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Moment).WithMany(p => p.Comments)
                .HasForeignKey(d => d.MomentId)
                .HasConstraintName("FK__Comments__Moment__6754599E");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Comments__UserID__68487DD7");
        });

        modelBuilder.Entity<Follower>(entity =>
        {
            entity.HasKey(e => new { e.FollowerId, e.FollowingId }).HasName("PK__Follower__79CB03DBFB6445C8");

            entity.Property(e => e.FollowerId).HasColumnName("FollowerID");
            entity.Property(e => e.FollowingId).HasColumnName("FollowingID");
            entity.Property(e => e.FollowDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.FollowerNavigation).WithMany(p => p.FollowerFollowerNavigations)
                .HasForeignKey(d => d.FollowerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Followers__Follo__5DCAEF64");

            entity.HasOne(d => d.Following).WithMany(p => p.FollowerFollowings)
                .HasForeignKey(d => d.FollowingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Followers__Follo__5EBF139D");
        });

        modelBuilder.Entity<Like>(entity =>
        {
            entity.HasKey(e => e.LikeId).HasName("PK__Likes__A2922CF4EA588C2E");

            entity.Property(e => e.LikeId).HasColumnName("LikeID");
            entity.Property(e => e.LikedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MomentId).HasColumnName("MomentID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Moment).WithMany(p => p.LikesNavigation)
                .HasForeignKey(d => d.MomentId)
                .HasConstraintName("FK__Likes__MomentID__6C190EBB");

            entity.HasOne(d => d.User).WithMany(p => p.Likes)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Likes__UserID__6D0D32F4");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.MessageId).HasName("PK__Messages__C87C037C6EA3FE2C");

            entity.Property(e => e.MessageId).HasColumnName("MessageID");
            entity.Property(e => e.IsRead).HasDefaultValue(false);
            entity.Property(e => e.ReceiverId).HasColumnName("ReceiverID");
            entity.Property(e => e.SenderId).HasColumnName("SenderID");
            entity.Property(e => e.SentAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Receiver).WithMany(p => p.MessageReceivers)
                .HasForeignKey(d => d.ReceiverId)
                .HasConstraintName("FK__Messages__Receiv__10566F31");

            entity.HasOne(d => d.Sender).WithMany(p => p.MessageSenders)
                .HasForeignKey(d => d.SenderId)
                .HasConstraintName("FK__Messages__Sender__0F624AF8");
        });

        modelBuilder.Entity<Moment>(entity =>
        {
            entity.HasKey(e => e.MomentId).HasName("PK__Moments__D89D9A6C91A7E073");

            entity.Property(e => e.MomentId).HasColumnName("MomentID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.IsMemory).HasDefaultValue(false);
            entity.Property(e => e.IsPublic).HasDefaultValue(true);
            entity.Property(e => e.Likes).HasDefaultValue(0);
            entity.Property(e => e.MediaType).HasMaxLength(20);
            entity.Property(e => e.MediaUrl)
                .HasMaxLength(255)
                .HasColumnName("MediaURL");
            entity.Property(e => e.Title).HasMaxLength(100);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Views).HasDefaultValue(0);

            entity.HasOne(d => d.User).WithMany(p => p.Moments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Moments__UserID__4222D4EF");
        });

        modelBuilder.Entity<MomentCategory>(entity =>
        {
            entity.HasKey(e => e.MomentCategoryId).HasName("PK__MomentCa__150AF91D9B2EBDB3");

            entity.Property(e => e.MomentCategoryId).HasColumnName("MomentCategoryID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.MomentId).HasColumnName("MomentID");

            entity.HasOne(d => d.Category).WithMany(p => p.MomentCategories)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__MomentCat__Categ__17F790F9");

            entity.HasOne(d => d.Moment).WithMany(p => p.MomentCategories)
                .HasForeignKey(d => d.MomentId)
                .HasConstraintName("FK__MomentCat__Momen__17036CC0");
        });

        modelBuilder.Entity<MomentShare>(entity =>
        {
            entity.HasKey(e => e.ShareId).HasName("PK__MomentSh__D32A3F8E596FB992");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
            entity.Property(e => e.IsAccepted).HasDefaultValue(false);
            entity.Property(e => e.MomentId).HasColumnName("MomentID");
            entity.Property(e => e.ReceiverId).HasColumnName("ReceiverID");
            entity.Property(e => e.SenderId).HasColumnName("SenderID");
            entity.Property(e => e.SharedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Moment).WithMany(p => p.MomentShares)
                .HasForeignKey(d => d.MomentId)
                .HasConstraintName("FK__MomentSha__Momen__4E88ABD4");

            entity.HasOne(d => d.Receiver).WithMany(p => p.MomentShareReceivers)
                .HasForeignKey(d => d.ReceiverId)
                .HasConstraintName("FK__MomentSha__Recei__5070F446");

            entity.HasOne(d => d.Sender).WithMany(p => p.MomentShareSenders)
                .HasForeignKey(d => d.SenderId)
                .HasConstraintName("FK__MomentSha__Sende__4F7CD00D");
        });

        modelBuilder.Entity<MomentTag>(entity =>
        {
            entity.HasKey(e => e.MomentTagId).HasName("PK__MomentTa__A3E91E48996E92AE");

            entity.Property(e => e.MomentTagId).HasColumnName("MomentTagID");
            entity.Property(e => e.MomentId).HasColumnName("MomentID");
            entity.Property(e => e.TagId).HasColumnName("TagID");

            entity.HasOne(d => d.Moment).WithMany(p => p.MomentTags)
                .HasForeignKey(d => d.MomentId)
                .HasConstraintName("FK__MomentTag__Momen__1DB06A4F");

            entity.HasOne(d => d.Tag).WithMany(p => p.MomentTags)
                .HasForeignKey(d => d.TagId)
                .HasConstraintName("FK__MomentTag__TagID__1EA48E88");
        });

        modelBuilder.Entity<MomentView>(entity =>
        {
            entity.HasKey(e => e.ViewId).HasName("PK__MomentVi__1E371C163BD72A67");

            entity.Property(e => e.ViewId).HasColumnName("ViewID");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(45)
                .HasColumnName("IPAddress");
            entity.Property(e => e.MomentId).HasColumnName("MomentID");
            entity.Property(e => e.ViewDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ViewerId).HasColumnName("ViewerID");

            entity.HasOne(d => d.Moment).WithMany(p => p.MomentViews)
                .HasForeignKey(d => d.MomentId)
                .HasConstraintName("FK__MomentVie__Momen__49C3F6B7");

            entity.HasOne(d => d.Viewer).WithMany(p => p.MomentViews)
                .HasForeignKey(d => d.ViewerId)
                .HasConstraintName("FK__MomentVie__Viewe__4AB81AF0");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__20CF2E321402FD82");

            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.Content).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsRead).HasDefaultValue(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Notificat__UserI__628FA481");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payments__9B556A584A002178");

            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");
            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PaymentDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Payments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Payments__UserID__70DDC3D8");
        });

        modelBuilder.Entity<PurchasableView>(entity =>
        {
            entity.HasKey(e => e.ViewPackageId).HasName("PK__Purchasa__9440FEC0C7BCF2D8");

            entity.Property(e => e.ViewPackageId).HasColumnName("ViewPackageID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.PackageName).HasMaxLength(100);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK__Reports__D5BD48E56418A99B");

            entity.Property(e => e.ReportId).HasColumnName("ReportID");
            entity.Property(e => e.MomentId).HasColumnName("MomentID");
            entity.Property(e => e.ReportContent).HasMaxLength(255);
            entity.Property(e => e.ReportDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ReporterId).HasColumnName("ReporterID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("Pending");

            entity.HasOne(d => d.Moment).WithMany(p => p.Reports)
                .HasForeignKey(d => d.MomentId)
                .HasConstraintName("FK__Reports__MomentI__09A971A2");

            entity.HasOne(d => d.Reporter).WithMany(p => p.Reports)
                .HasForeignKey(d => d.ReporterId)
                .HasConstraintName("FK__Reports__Reporte__0A9D95DB");
        });

        modelBuilder.Entity<SavedMoment>(entity =>
        {
            entity.HasKey(e => e.SaveId).HasName("PK__SavedMom__1450D3860C659060");

            entity.Property(e => e.SaveId).HasColumnName("SaveID");
            entity.Property(e => e.MomentId).HasColumnName("MomentID");
            entity.Property(e => e.SavedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Moment).WithMany(p => p.SavedMoments)
                .HasForeignKey(d => d.MomentId)
                .HasConstraintName("FK__SavedMome__Momen__05D8E0BE");

            entity.HasOne(d => d.User).WithMany(p => p.SavedMoments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__SavedMome__UserI__04E4BC85");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.TagId).HasName("PK__Tags__657CFA4CCC06BDFA");

            entity.HasIndex(e => e.TagName, "UQ__Tags__BDE0FD1D6B3435A7").IsUnique();

            entity.Property(e => e.TagId).HasColumnName("TagID");
            entity.Property(e => e.TagName).HasMaxLength(50);
        });

        modelBuilder.Entity<Theme>(entity =>
        {
            entity.HasKey(e => e.ThemeId).HasName("PK__Themes__FBB3E4B9B41CB810");

            entity.Property(e => e.ThemeId).HasColumnName("ThemeID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ThemeName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<UserProfile>(entity =>
        {
            entity.HasKey(e => e.ProfileId).HasName("PK__UserProf__290C888470D20931");

            entity.Property(e => e.ProfileId).HasColumnName("ProfileID");
            entity.Property(e => e.Bio).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(50);
            entity.Property(e => e.FullName).HasMaxLength(100);
            entity.Property(e => e.Gender).HasMaxLength(10);
            entity.Property(e => e.ProfilePictureUrl)
                .HasMaxLength(255)
                .HasColumnName("ProfilePictureURL");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.UserProfiles)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__UserProfi__UserI__3F466844");
        });

        modelBuilder.Entity<UserTheme>(entity =>
        {
            entity.HasKey(e => e.UserThemeId).HasName("PK__UserThem__CC8724CBFE21DDCC");

            entity.Property(e => e.UserThemeId).HasColumnName("UserThemeID");
            entity.Property(e => e.PurchasedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ThemeId).HasColumnName("ThemeID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Theme).WithMany(p => p.UserThemes)
                .HasForeignKey(d => d.ThemeId)
                .HasConstraintName("FK__UserTheme__Theme__59FA5E80");

            entity.HasOne(d => d.User).WithMany(p => p.UserThemes)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__UserTheme__UserI__59063A47");
        });

        modelBuilder.Entity<UserViewPackage>(entity =>
        {
            entity.HasKey(e => e.UserViewPackageId).HasName("PK__UserView__BEAAA46877563381");

            entity.Property(e => e.UserViewPackageId).HasColumnName("UserViewPackageID");
            entity.Property(e => e.PurchasedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.ViewPackageId).HasColumnName("ViewPackageID");

            entity.HasOne(d => d.User).WithMany(p => p.UserViewPackages)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__UserViewP__UserI__25518C17");

            entity.HasOne(d => d.ViewPackage).WithMany(p => p.UserViewPackages)
                .HasForeignKey(d => d.ViewPackageId)
                .HasConstraintName("FK__UserViewP__ViewP__2645B050");
        });
    }
}